/* 
 * Woolball AI Network API
 *
 * **Transform idle browsers into a powerful distributed AI inference network**  For detailed examples and model lists, visit our [GitHub repository](https://github.com/woolball-xyz/woolball-server).
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// TextToSpeechRequestContract
    /// </summary>
    [DataContract]
        public partial class TextToSpeechRequestContract :  IEquatable<TextToSpeechRequestContract>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TextToSpeechRequestContract" /> class.
        /// </summary>
        /// <param name="model">model (required).</param>
        /// <param name="dtype">dtype (required).</param>
        /// <param name="input">input (required).</param>
        /// <param name="voice">voice.</param>
        /// <param name="stream">stream.</param>
        public TextToSpeechRequestContract(string model = default(string), string dtype = default(string), string input = default(string), string voice = default(string), bool? stream = default(bool?))
        {
            // to ensure "model" is required (not null)
            if (model == null)
            {
                throw new InvalidDataException("model is a required property for TextToSpeechRequestContract and cannot be null");
            }
            else
            {
                this.Model = model;
            }
            // to ensure "dtype" is required (not null)
            if (dtype == null)
            {
                throw new InvalidDataException("dtype is a required property for TextToSpeechRequestContract and cannot be null");
            }
            else
            {
                this.Dtype = dtype;
            }
            // to ensure "input" is required (not null)
            if (input == null)
            {
                throw new InvalidDataException("input is a required property for TextToSpeechRequestContract and cannot be null");
            }
            else
            {
                this.Input = input;
            }
            this.Voice = voice;
            this.Stream = stream;
        }
        
        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [DataMember(Name="model", EmitDefaultValue=false)]
        public string Model { get; set; }

        /// <summary>
        /// Gets or Sets Dtype
        /// </summary>
        [DataMember(Name="dtype", EmitDefaultValue=false)]
        public string Dtype { get; set; }

        /// <summary>
        /// Gets or Sets Input
        /// </summary>
        [DataMember(Name="input", EmitDefaultValue=false)]
        public string Input { get; set; }

        /// <summary>
        /// Gets or Sets Voice
        /// </summary>
        [DataMember(Name="voice", EmitDefaultValue=false)]
        public string Voice { get; set; }

        /// <summary>
        /// Gets or Sets Stream
        /// </summary>
        [DataMember(Name="stream", EmitDefaultValue=false)]
        public bool? Stream { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TextToSpeechRequestContract {\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Dtype: ").Append(Dtype).Append("\n");
            sb.Append("  Input: ").Append(Input).Append("\n");
            sb.Append("  Voice: ").Append(Voice).Append("\n");
            sb.Append("  Stream: ").Append(Stream).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TextToSpeechRequestContract);
        }

        /// <summary>
        /// Returns true if TextToSpeechRequestContract instances are equal
        /// </summary>
        /// <param name="input">Instance of TextToSpeechRequestContract to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TextToSpeechRequestContract input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Model == input.Model ||
                    (this.Model != null &&
                    this.Model.Equals(input.Model))
                ) && 
                (
                    this.Dtype == input.Dtype ||
                    (this.Dtype != null &&
                    this.Dtype.Equals(input.Dtype))
                ) && 
                (
                    this.Input == input.Input ||
                    (this.Input != null &&
                    this.Input.Equals(input.Input))
                ) && 
                (
                    this.Voice == input.Voice ||
                    (this.Voice != null &&
                    this.Voice.Equals(input.Voice))
                ) && 
                (
                    this.Stream == input.Stream ||
                    (this.Stream != null &&
                    this.Stream.Equals(input.Stream))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Model != null)
                    hashCode = hashCode * 59 + this.Model.GetHashCode();
                if (this.Dtype != null)
                    hashCode = hashCode * 59 + this.Dtype.GetHashCode();
                if (this.Input != null)
                    hashCode = hashCode * 59 + this.Input.GetHashCode();
                if (this.Voice != null)
                    hashCode = hashCode * 59 + this.Voice.GetHashCode();
                if (this.Stream != null)
                    hashCode = hashCode * 59 + this.Stream.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
