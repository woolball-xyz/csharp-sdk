/* 
 * Woolball AI Network API
 *
 * **Transform idle browsers into a powerful distributed AI inference network**  For detailed examples and model lists, visit our [GitHub repository](https://github.com/woolball-xyz/woolball-server).
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// TextGenerationRequestContract
    /// </summary>
    [DataContract]
        public partial class TextGenerationRequestContract :  IEquatable<TextGenerationRequestContract>, IValidatableObject
    {
        /// <summary>
        /// The AI provider to use
        /// </summary>
        /// <value>The AI provider to use</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ProviderEnum
        {
            /// <summary>
            /// Enum Transformers for value: transformers
            /// </summary>
            [EnumMember(Value = "transformers")]
            Transformers = 1,
            /// <summary>
            /// Enum Webllm for value: webllm
            /// </summary>
            [EnumMember(Value = "webllm")]
            Webllm = 2,
            /// <summary>
            /// Enum Mediapipe for value: mediapipe
            /// </summary>
            [EnumMember(Value = "mediapipe")]
            Mediapipe = 3        }
        /// <summary>
        /// The AI provider to use
        /// </summary>
        /// <value>The AI provider to use</value>
        [DataMember(Name="provider", EmitDefaultValue=false)]
        public ProviderEnum Provider { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TextGenerationRequestContract" /> class.
        /// </summary>
        /// <param name="provider">The AI provider to use (required).</param>
        /// <param name="model">The AI model to use for processing (required).</param>
        /// <param name="input">Input text or messages for generation (required).</param>
        /// <param name="topK">The number of highest probability vocabulary tokens to keep for top-k-filtering.</param>
        /// <param name="topP">If set to float &lt; 1, only the smallest set of most probable tokens with probabilities that add up to top_p or higher are kept for generation.</param>
        /// <param name="temperature">The value used to modulate the next token probabilities.</param>
        /// <param name="repetitionPenalty">Parameter for repetition penalty. 1.0 means no penalty.</param>
        /// <param name="dtype">Quantization level (e.g., &#x27;fp16&#x27;, &#x27;q4&#x27;, &#x27;q8&#x27;) - Transformers only.</param>
        /// <param name="maxLength">Maximum length the generated tokens can have - Transformers only.</param>
        /// <param name="maxNewTokens">Maximum number of tokens to generate - Transformers only.</param>
        /// <param name="minLength">Minimum length of the sequence to be generated - Transformers only.</param>
        /// <param name="minNewTokens">Minimum numbers of tokens to generate - Transformers only.</param>
        /// <param name="doSample">Whether to use sampling - Transformers only.</param>
        /// <param name="numBeams">Number of beams for beam search - Transformers only.</param>
        /// <param name="noRepeatNgramSize">If &gt; 0, all ngrams of that size can only occur once - Transformers only.</param>
        /// <param name="contextWindowSize">Size of the context window for the model - WebLLM only.</param>
        /// <param name="slidingWindowSize">Size of the sliding window for attention - WebLLM only.</param>
        /// <param name="attentionSinkSize">Size of the attention sink - WebLLM only.</param>
        /// <param name="frequencyPenalty">Penalty for token frequency - WebLLM only.</param>
        /// <param name="presencePenalty">Penalty for token presence - WebLLM only.</param>
        /// <param name="bosTokenId">Beginning of sequence token ID - WebLLM only.</param>
        /// <param name="maxTokens">Maximum number of tokens to generate - MediaPipe only.</param>
        /// <param name="randomSeed">Random seed for reproducible results - MediaPipe only.</param>
        public TextGenerationRequestContract(ProviderEnum provider = default(ProviderEnum), string model = default(string), string input = default(string), int? topK = default(int?), double? topP = default(double?), double? temperature = default(double?), double? repetitionPenalty = default(double?), string dtype = default(string), int? maxLength = default(int?), int? maxNewTokens = default(int?), int? minLength = default(int?), int? minNewTokens = default(int?), bool? doSample = default(bool?), int? numBeams = default(int?), int? noRepeatNgramSize = default(int?), int? contextWindowSize = default(int?), int? slidingWindowSize = default(int?), int? attentionSinkSize = default(int?), double? frequencyPenalty = default(double?), double? presencePenalty = default(double?), int? bosTokenId = default(int?), int? maxTokens = default(int?), int? randomSeed = default(int?))
        {
            // to ensure "provider" is required (not null)
            if (provider == null)
            {
                throw new InvalidDataException("provider is a required property for TextGenerationRequestContract and cannot be null");
            }
            else
            {
                this.Provider = provider;
            }
            // to ensure "model" is required (not null)
            if (model == null)
            {
                throw new InvalidDataException("model is a required property for TextGenerationRequestContract and cannot be null");
            }
            else
            {
                this.Model = model;
            }
            // to ensure "input" is required (not null)
            if (input == null)
            {
                throw new InvalidDataException("input is a required property for TextGenerationRequestContract and cannot be null");
            }
            else
            {
                this.Input = input;
            }
            this.TopK = topK;
            this.TopP = topP;
            this.Temperature = temperature;
            this.RepetitionPenalty = repetitionPenalty;
            this.Dtype = dtype;
            this.MaxLength = maxLength;
            this.MaxNewTokens = maxNewTokens;
            this.MinLength = minLength;
            this.MinNewTokens = minNewTokens;
            this.DoSample = doSample;
            this.NumBeams = numBeams;
            this.NoRepeatNgramSize = noRepeatNgramSize;
            this.ContextWindowSize = contextWindowSize;
            this.SlidingWindowSize = slidingWindowSize;
            this.AttentionSinkSize = attentionSinkSize;
            this.FrequencyPenalty = frequencyPenalty;
            this.PresencePenalty = presencePenalty;
            this.BosTokenId = bosTokenId;
            this.MaxTokens = maxTokens;
            this.RandomSeed = randomSeed;
        }
        

        /// <summary>
        /// The AI model to use for processing
        /// </summary>
        /// <value>The AI model to use for processing</value>
        [DataMember(Name="model", EmitDefaultValue=false)]
        public string Model { get; set; }

        /// <summary>
        /// Input text or messages for generation
        /// </summary>
        /// <value>Input text or messages for generation</value>
        [DataMember(Name="input", EmitDefaultValue=false)]
        public string Input { get; set; }

        /// <summary>
        /// The number of highest probability vocabulary tokens to keep for top-k-filtering
        /// </summary>
        /// <value>The number of highest probability vocabulary tokens to keep for top-k-filtering</value>
        [DataMember(Name="top_k", EmitDefaultValue=false)]
        public int? TopK { get; set; }

        /// <summary>
        /// If set to float &lt; 1, only the smallest set of most probable tokens with probabilities that add up to top_p or higher are kept for generation
        /// </summary>
        /// <value>If set to float &lt; 1, only the smallest set of most probable tokens with probabilities that add up to top_p or higher are kept for generation</value>
        [DataMember(Name="top_p", EmitDefaultValue=false)]
        public double? TopP { get; set; }

        /// <summary>
        /// The value used to modulate the next token probabilities
        /// </summary>
        /// <value>The value used to modulate the next token probabilities</value>
        [DataMember(Name="temperature", EmitDefaultValue=false)]
        public double? Temperature { get; set; }

        /// <summary>
        /// Parameter for repetition penalty. 1.0 means no penalty
        /// </summary>
        /// <value>Parameter for repetition penalty. 1.0 means no penalty</value>
        [DataMember(Name="repetition_penalty", EmitDefaultValue=false)]
        public double? RepetitionPenalty { get; set; }

        /// <summary>
        /// Quantization level (e.g., &#x27;fp16&#x27;, &#x27;q4&#x27;, &#x27;q8&#x27;) - Transformers only
        /// </summary>
        /// <value>Quantization level (e.g., &#x27;fp16&#x27;, &#x27;q4&#x27;, &#x27;q8&#x27;) - Transformers only</value>
        [DataMember(Name="dtype", EmitDefaultValue=false)]
        public string Dtype { get; set; }

        /// <summary>
        /// Maximum length the generated tokens can have - Transformers only
        /// </summary>
        /// <value>Maximum length the generated tokens can have - Transformers only</value>
        [DataMember(Name="max_length", EmitDefaultValue=false)]
        public int? MaxLength { get; set; }

        /// <summary>
        /// Maximum number of tokens to generate - Transformers only
        /// </summary>
        /// <value>Maximum number of tokens to generate - Transformers only</value>
        [DataMember(Name="max_new_tokens", EmitDefaultValue=false)]
        public int? MaxNewTokens { get; set; }

        /// <summary>
        /// Minimum length of the sequence to be generated - Transformers only
        /// </summary>
        /// <value>Minimum length of the sequence to be generated - Transformers only</value>
        [DataMember(Name="min_length", EmitDefaultValue=false)]
        public int? MinLength { get; set; }

        /// <summary>
        /// Minimum numbers of tokens to generate - Transformers only
        /// </summary>
        /// <value>Minimum numbers of tokens to generate - Transformers only</value>
        [DataMember(Name="min_new_tokens", EmitDefaultValue=false)]
        public int? MinNewTokens { get; set; }

        /// <summary>
        /// Whether to use sampling - Transformers only
        /// </summary>
        /// <value>Whether to use sampling - Transformers only</value>
        [DataMember(Name="do_sample", EmitDefaultValue=false)]
        public bool? DoSample { get; set; }

        /// <summary>
        /// Number of beams for beam search - Transformers only
        /// </summary>
        /// <value>Number of beams for beam search - Transformers only</value>
        [DataMember(Name="num_beams", EmitDefaultValue=false)]
        public int? NumBeams { get; set; }

        /// <summary>
        /// If &gt; 0, all ngrams of that size can only occur once - Transformers only
        /// </summary>
        /// <value>If &gt; 0, all ngrams of that size can only occur once - Transformers only</value>
        [DataMember(Name="no_repeat_ngram_size", EmitDefaultValue=false)]
        public int? NoRepeatNgramSize { get; set; }

        /// <summary>
        /// Size of the context window for the model - WebLLM only
        /// </summary>
        /// <value>Size of the context window for the model - WebLLM only</value>
        [DataMember(Name="context_window_size", EmitDefaultValue=false)]
        public int? ContextWindowSize { get; set; }

        /// <summary>
        /// Size of the sliding window for attention - WebLLM only
        /// </summary>
        /// <value>Size of the sliding window for attention - WebLLM only</value>
        [DataMember(Name="sliding_window_size", EmitDefaultValue=false)]
        public int? SlidingWindowSize { get; set; }

        /// <summary>
        /// Size of the attention sink - WebLLM only
        /// </summary>
        /// <value>Size of the attention sink - WebLLM only</value>
        [DataMember(Name="attention_sink_size", EmitDefaultValue=false)]
        public int? AttentionSinkSize { get; set; }

        /// <summary>
        /// Penalty for token frequency - WebLLM only
        /// </summary>
        /// <value>Penalty for token frequency - WebLLM only</value>
        [DataMember(Name="frequency_penalty", EmitDefaultValue=false)]
        public double? FrequencyPenalty { get; set; }

        /// <summary>
        /// Penalty for token presence - WebLLM only
        /// </summary>
        /// <value>Penalty for token presence - WebLLM only</value>
        [DataMember(Name="presence_penalty", EmitDefaultValue=false)]
        public double? PresencePenalty { get; set; }

        /// <summary>
        /// Beginning of sequence token ID - WebLLM only
        /// </summary>
        /// <value>Beginning of sequence token ID - WebLLM only</value>
        [DataMember(Name="bos_token_id", EmitDefaultValue=false)]
        public int? BosTokenId { get; set; }

        /// <summary>
        /// Maximum number of tokens to generate - MediaPipe only
        /// </summary>
        /// <value>Maximum number of tokens to generate - MediaPipe only</value>
        [DataMember(Name="max_tokens", EmitDefaultValue=false)]
        public int? MaxTokens { get; set; }

        /// <summary>
        /// Random seed for reproducible results - MediaPipe only
        /// </summary>
        /// <value>Random seed for reproducible results - MediaPipe only</value>
        [DataMember(Name="random_seed", EmitDefaultValue=false)]
        public int? RandomSeed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TextGenerationRequestContract {\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Input: ").Append(Input).Append("\n");
            sb.Append("  TopK: ").Append(TopK).Append("\n");
            sb.Append("  TopP: ").Append(TopP).Append("\n");
            sb.Append("  Temperature: ").Append(Temperature).Append("\n");
            sb.Append("  RepetitionPenalty: ").Append(RepetitionPenalty).Append("\n");
            sb.Append("  Dtype: ").Append(Dtype).Append("\n");
            sb.Append("  MaxLength: ").Append(MaxLength).Append("\n");
            sb.Append("  MaxNewTokens: ").Append(MaxNewTokens).Append("\n");
            sb.Append("  MinLength: ").Append(MinLength).Append("\n");
            sb.Append("  MinNewTokens: ").Append(MinNewTokens).Append("\n");
            sb.Append("  DoSample: ").Append(DoSample).Append("\n");
            sb.Append("  NumBeams: ").Append(NumBeams).Append("\n");
            sb.Append("  NoRepeatNgramSize: ").Append(NoRepeatNgramSize).Append("\n");
            sb.Append("  ContextWindowSize: ").Append(ContextWindowSize).Append("\n");
            sb.Append("  SlidingWindowSize: ").Append(SlidingWindowSize).Append("\n");
            sb.Append("  AttentionSinkSize: ").Append(AttentionSinkSize).Append("\n");
            sb.Append("  FrequencyPenalty: ").Append(FrequencyPenalty).Append("\n");
            sb.Append("  PresencePenalty: ").Append(PresencePenalty).Append("\n");
            sb.Append("  BosTokenId: ").Append(BosTokenId).Append("\n");
            sb.Append("  MaxTokens: ").Append(MaxTokens).Append("\n");
            sb.Append("  RandomSeed: ").Append(RandomSeed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TextGenerationRequestContract);
        }

        /// <summary>
        /// Returns true if TextGenerationRequestContract instances are equal
        /// </summary>
        /// <param name="input">Instance of TextGenerationRequestContract to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TextGenerationRequestContract input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Provider == input.Provider ||
                    (this.Provider != null &&
                    this.Provider.Equals(input.Provider))
                ) && 
                (
                    this.Model == input.Model ||
                    (this.Model != null &&
                    this.Model.Equals(input.Model))
                ) && 
                (
                    this.Input == input.Input ||
                    (this.Input != null &&
                    this.Input.Equals(input.Input))
                ) && 
                (
                    this.TopK == input.TopK ||
                    (this.TopK != null &&
                    this.TopK.Equals(input.TopK))
                ) && 
                (
                    this.TopP == input.TopP ||
                    (this.TopP != null &&
                    this.TopP.Equals(input.TopP))
                ) && 
                (
                    this.Temperature == input.Temperature ||
                    (this.Temperature != null &&
                    this.Temperature.Equals(input.Temperature))
                ) && 
                (
                    this.RepetitionPenalty == input.RepetitionPenalty ||
                    (this.RepetitionPenalty != null &&
                    this.RepetitionPenalty.Equals(input.RepetitionPenalty))
                ) && 
                (
                    this.Dtype == input.Dtype ||
                    (this.Dtype != null &&
                    this.Dtype.Equals(input.Dtype))
                ) && 
                (
                    this.MaxLength == input.MaxLength ||
                    (this.MaxLength != null &&
                    this.MaxLength.Equals(input.MaxLength))
                ) && 
                (
                    this.MaxNewTokens == input.MaxNewTokens ||
                    (this.MaxNewTokens != null &&
                    this.MaxNewTokens.Equals(input.MaxNewTokens))
                ) && 
                (
                    this.MinLength == input.MinLength ||
                    (this.MinLength != null &&
                    this.MinLength.Equals(input.MinLength))
                ) && 
                (
                    this.MinNewTokens == input.MinNewTokens ||
                    (this.MinNewTokens != null &&
                    this.MinNewTokens.Equals(input.MinNewTokens))
                ) && 
                (
                    this.DoSample == input.DoSample ||
                    (this.DoSample != null &&
                    this.DoSample.Equals(input.DoSample))
                ) && 
                (
                    this.NumBeams == input.NumBeams ||
                    (this.NumBeams != null &&
                    this.NumBeams.Equals(input.NumBeams))
                ) && 
                (
                    this.NoRepeatNgramSize == input.NoRepeatNgramSize ||
                    (this.NoRepeatNgramSize != null &&
                    this.NoRepeatNgramSize.Equals(input.NoRepeatNgramSize))
                ) && 
                (
                    this.ContextWindowSize == input.ContextWindowSize ||
                    (this.ContextWindowSize != null &&
                    this.ContextWindowSize.Equals(input.ContextWindowSize))
                ) && 
                (
                    this.SlidingWindowSize == input.SlidingWindowSize ||
                    (this.SlidingWindowSize != null &&
                    this.SlidingWindowSize.Equals(input.SlidingWindowSize))
                ) && 
                (
                    this.AttentionSinkSize == input.AttentionSinkSize ||
                    (this.AttentionSinkSize != null &&
                    this.AttentionSinkSize.Equals(input.AttentionSinkSize))
                ) && 
                (
                    this.FrequencyPenalty == input.FrequencyPenalty ||
                    (this.FrequencyPenalty != null &&
                    this.FrequencyPenalty.Equals(input.FrequencyPenalty))
                ) && 
                (
                    this.PresencePenalty == input.PresencePenalty ||
                    (this.PresencePenalty != null &&
                    this.PresencePenalty.Equals(input.PresencePenalty))
                ) && 
                (
                    this.BosTokenId == input.BosTokenId ||
                    (this.BosTokenId != null &&
                    this.BosTokenId.Equals(input.BosTokenId))
                ) && 
                (
                    this.MaxTokens == input.MaxTokens ||
                    (this.MaxTokens != null &&
                    this.MaxTokens.Equals(input.MaxTokens))
                ) && 
                (
                    this.RandomSeed == input.RandomSeed ||
                    (this.RandomSeed != null &&
                    this.RandomSeed.Equals(input.RandomSeed))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Provider != null)
                    hashCode = hashCode * 59 + this.Provider.GetHashCode();
                if (this.Model != null)
                    hashCode = hashCode * 59 + this.Model.GetHashCode();
                if (this.Input != null)
                    hashCode = hashCode * 59 + this.Input.GetHashCode();
                if (this.TopK != null)
                    hashCode = hashCode * 59 + this.TopK.GetHashCode();
                if (this.TopP != null)
                    hashCode = hashCode * 59 + this.TopP.GetHashCode();
                if (this.Temperature != null)
                    hashCode = hashCode * 59 + this.Temperature.GetHashCode();
                if (this.RepetitionPenalty != null)
                    hashCode = hashCode * 59 + this.RepetitionPenalty.GetHashCode();
                if (this.Dtype != null)
                    hashCode = hashCode * 59 + this.Dtype.GetHashCode();
                if (this.MaxLength != null)
                    hashCode = hashCode * 59 + this.MaxLength.GetHashCode();
                if (this.MaxNewTokens != null)
                    hashCode = hashCode * 59 + this.MaxNewTokens.GetHashCode();
                if (this.MinLength != null)
                    hashCode = hashCode * 59 + this.MinLength.GetHashCode();
                if (this.MinNewTokens != null)
                    hashCode = hashCode * 59 + this.MinNewTokens.GetHashCode();
                if (this.DoSample != null)
                    hashCode = hashCode * 59 + this.DoSample.GetHashCode();
                if (this.NumBeams != null)
                    hashCode = hashCode * 59 + this.NumBeams.GetHashCode();
                if (this.NoRepeatNgramSize != null)
                    hashCode = hashCode * 59 + this.NoRepeatNgramSize.GetHashCode();
                if (this.ContextWindowSize != null)
                    hashCode = hashCode * 59 + this.ContextWindowSize.GetHashCode();
                if (this.SlidingWindowSize != null)
                    hashCode = hashCode * 59 + this.SlidingWindowSize.GetHashCode();
                if (this.AttentionSinkSize != null)
                    hashCode = hashCode * 59 + this.AttentionSinkSize.GetHashCode();
                if (this.FrequencyPenalty != null)
                    hashCode = hashCode * 59 + this.FrequencyPenalty.GetHashCode();
                if (this.PresencePenalty != null)
                    hashCode = hashCode * 59 + this.PresencePenalty.GetHashCode();
                if (this.BosTokenId != null)
                    hashCode = hashCode * 59 + this.BosTokenId.GetHashCode();
                if (this.MaxTokens != null)
                    hashCode = hashCode * 59 + this.MaxTokens.GetHashCode();
                if (this.RandomSeed != null)
                    hashCode = hashCode * 59 + this.RandomSeed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
