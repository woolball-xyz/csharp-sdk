/* 
 * Woolball AI Network API
 *
 * **Transform idle browsers into a powerful distributed AI inference network**  For detailed examples and model lists, visit our [GitHub repository](https://github.com/woolball-xyz/woolball-server).
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ITextGenerationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Text Generation - Multi-Provider
        /// </summary>
        /// <remarks>
        /// Generate text using multiple AI providers (Transformers.js, WebLLM, MediaPipe). Use the &#x27;provider&#x27; field to specify which AI provider to use for text generation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider"></param>
        /// <param name="model"></param>
        /// <param name="input"></param>
        /// <param name="topK"></param>
        /// <param name="topP"></param>
        /// <param name="temperature"></param>
        /// <param name="repetitionPenalty"></param>
        /// <param name="dtype"></param>
        /// <param name="maxLength"></param>
        /// <param name="maxNewTokens"></param>
        /// <param name="minLength"></param>
        /// <param name="minNewTokens"></param>
        /// <param name="doSample"></param>
        /// <param name="numBeams"></param>
        /// <param name="noRepeatNgramSize"></param>
        /// <param name="contextWindowSize"></param>
        /// <param name="slidingWindowSize"></param>
        /// <param name="attentionSinkSize"></param>
        /// <param name="frequencyPenalty"></param>
        /// <param name="presencePenalty"></param>
        /// <param name="bosTokenId"></param>
        /// <param name="maxTokens"></param>
        /// <param name="randomSeed"></param>
        /// <returns>TextGenerationResponse</returns>
        TextGenerationResponse TextGeneration (string provider, string model, string input, int? topK, double? topP, double? temperature, double? repetitionPenalty, string dtype, int? maxLength, int? maxNewTokens, int? minLength, int? minNewTokens, bool? doSample, int? numBeams, int? noRepeatNgramSize, int? contextWindowSize, int? slidingWindowSize, int? attentionSinkSize, double? frequencyPenalty, double? presencePenalty, int? bosTokenId, int? maxTokens, int? randomSeed);

        /// <summary>
        /// Text Generation - Multi-Provider
        /// </summary>
        /// <remarks>
        /// Generate text using multiple AI providers (Transformers.js, WebLLM, MediaPipe). Use the &#x27;provider&#x27; field to specify which AI provider to use for text generation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider"></param>
        /// <param name="model"></param>
        /// <param name="input"></param>
        /// <param name="topK"></param>
        /// <param name="topP"></param>
        /// <param name="temperature"></param>
        /// <param name="repetitionPenalty"></param>
        /// <param name="dtype"></param>
        /// <param name="maxLength"></param>
        /// <param name="maxNewTokens"></param>
        /// <param name="minLength"></param>
        /// <param name="minNewTokens"></param>
        /// <param name="doSample"></param>
        /// <param name="numBeams"></param>
        /// <param name="noRepeatNgramSize"></param>
        /// <param name="contextWindowSize"></param>
        /// <param name="slidingWindowSize"></param>
        /// <param name="attentionSinkSize"></param>
        /// <param name="frequencyPenalty"></param>
        /// <param name="presencePenalty"></param>
        /// <param name="bosTokenId"></param>
        /// <param name="maxTokens"></param>
        /// <param name="randomSeed"></param>
        /// <returns>ApiResponse of TextGenerationResponse</returns>
        ApiResponse<TextGenerationResponse> TextGenerationWithHttpInfo (string provider, string model, string input, int? topK, double? topP, double? temperature, double? repetitionPenalty, string dtype, int? maxLength, int? maxNewTokens, int? minLength, int? minNewTokens, bool? doSample, int? numBeams, int? noRepeatNgramSize, int? contextWindowSize, int? slidingWindowSize, int? attentionSinkSize, double? frequencyPenalty, double? presencePenalty, int? bosTokenId, int? maxTokens, int? randomSeed);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Text Generation - Multi-Provider
        /// </summary>
        /// <remarks>
        /// Generate text using multiple AI providers (Transformers.js, WebLLM, MediaPipe). Use the &#x27;provider&#x27; field to specify which AI provider to use for text generation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider"></param>
        /// <param name="model"></param>
        /// <param name="input"></param>
        /// <param name="topK"></param>
        /// <param name="topP"></param>
        /// <param name="temperature"></param>
        /// <param name="repetitionPenalty"></param>
        /// <param name="dtype"></param>
        /// <param name="maxLength"></param>
        /// <param name="maxNewTokens"></param>
        /// <param name="minLength"></param>
        /// <param name="minNewTokens"></param>
        /// <param name="doSample"></param>
        /// <param name="numBeams"></param>
        /// <param name="noRepeatNgramSize"></param>
        /// <param name="contextWindowSize"></param>
        /// <param name="slidingWindowSize"></param>
        /// <param name="attentionSinkSize"></param>
        /// <param name="frequencyPenalty"></param>
        /// <param name="presencePenalty"></param>
        /// <param name="bosTokenId"></param>
        /// <param name="maxTokens"></param>
        /// <param name="randomSeed"></param>
        /// <returns>Task of TextGenerationResponse</returns>
        System.Threading.Tasks.Task<TextGenerationResponse> TextGenerationAsync (string provider, string model, string input, int? topK, double? topP, double? temperature, double? repetitionPenalty, string dtype, int? maxLength, int? maxNewTokens, int? minLength, int? minNewTokens, bool? doSample, int? numBeams, int? noRepeatNgramSize, int? contextWindowSize, int? slidingWindowSize, int? attentionSinkSize, double? frequencyPenalty, double? presencePenalty, int? bosTokenId, int? maxTokens, int? randomSeed);

        /// <summary>
        /// Text Generation - Multi-Provider
        /// </summary>
        /// <remarks>
        /// Generate text using multiple AI providers (Transformers.js, WebLLM, MediaPipe). Use the &#x27;provider&#x27; field to specify which AI provider to use for text generation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider"></param>
        /// <param name="model"></param>
        /// <param name="input"></param>
        /// <param name="topK"></param>
        /// <param name="topP"></param>
        /// <param name="temperature"></param>
        /// <param name="repetitionPenalty"></param>
        /// <param name="dtype"></param>
        /// <param name="maxLength"></param>
        /// <param name="maxNewTokens"></param>
        /// <param name="minLength"></param>
        /// <param name="minNewTokens"></param>
        /// <param name="doSample"></param>
        /// <param name="numBeams"></param>
        /// <param name="noRepeatNgramSize"></param>
        /// <param name="contextWindowSize"></param>
        /// <param name="slidingWindowSize"></param>
        /// <param name="attentionSinkSize"></param>
        /// <param name="frequencyPenalty"></param>
        /// <param name="presencePenalty"></param>
        /// <param name="bosTokenId"></param>
        /// <param name="maxTokens"></param>
        /// <param name="randomSeed"></param>
        /// <returns>Task of ApiResponse (TextGenerationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TextGenerationResponse>> TextGenerationAsyncWithHttpInfo (string provider, string model, string input, int? topK, double? topP, double? temperature, double? repetitionPenalty, string dtype, int? maxLength, int? maxNewTokens, int? minLength, int? minNewTokens, bool? doSample, int? numBeams, int? noRepeatNgramSize, int? contextWindowSize, int? slidingWindowSize, int? attentionSinkSize, double? frequencyPenalty, double? presencePenalty, int? bosTokenId, int? maxTokens, int? randomSeed);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class TextGenerationApi : ITextGenerationApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TextGenerationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TextGenerationApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TextGenerationApi"/> class
        /// </summary>
        /// <returns></returns>
        public TextGenerationApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TextGenerationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TextGenerationApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.Options.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Text Generation - Multi-Provider Generate text using multiple AI providers (Transformers.js, WebLLM, MediaPipe). Use the &#x27;provider&#x27; field to specify which AI provider to use for text generation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider"></param>
        /// <param name="model"></param>
        /// <param name="input"></param>
        /// <param name="topK"></param>
        /// <param name="topP"></param>
        /// <param name="temperature"></param>
        /// <param name="repetitionPenalty"></param>
        /// <param name="dtype"></param>
        /// <param name="maxLength"></param>
        /// <param name="maxNewTokens"></param>
        /// <param name="minLength"></param>
        /// <param name="minNewTokens"></param>
        /// <param name="doSample"></param>
        /// <param name="numBeams"></param>
        /// <param name="noRepeatNgramSize"></param>
        /// <param name="contextWindowSize"></param>
        /// <param name="slidingWindowSize"></param>
        /// <param name="attentionSinkSize"></param>
        /// <param name="frequencyPenalty"></param>
        /// <param name="presencePenalty"></param>
        /// <param name="bosTokenId"></param>
        /// <param name="maxTokens"></param>
        /// <param name="randomSeed"></param>
        /// <returns>TextGenerationResponse</returns>
        public TextGenerationResponse TextGeneration (string provider, string model, string input, int? topK, double? topP, double? temperature, double? repetitionPenalty, string dtype, int? maxLength, int? maxNewTokens, int? minLength, int? minNewTokens, bool? doSample, int? numBeams, int? noRepeatNgramSize, int? contextWindowSize, int? slidingWindowSize, int? attentionSinkSize, double? frequencyPenalty, double? presencePenalty, int? bosTokenId, int? maxTokens, int? randomSeed)
        {
             ApiResponse<TextGenerationResponse> localVarResponse = TextGenerationWithHttpInfo(provider, model, input, topK, topP, temperature, repetitionPenalty, dtype, maxLength, maxNewTokens, minLength, minNewTokens, doSample, numBeams, noRepeatNgramSize, contextWindowSize, slidingWindowSize, attentionSinkSize, frequencyPenalty, presencePenalty, bosTokenId, maxTokens, randomSeed);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Text Generation - Multi-Provider Generate text using multiple AI providers (Transformers.js, WebLLM, MediaPipe). Use the &#x27;provider&#x27; field to specify which AI provider to use for text generation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider"></param>
        /// <param name="model"></param>
        /// <param name="input"></param>
        /// <param name="topK"></param>
        /// <param name="topP"></param>
        /// <param name="temperature"></param>
        /// <param name="repetitionPenalty"></param>
        /// <param name="dtype"></param>
        /// <param name="maxLength"></param>
        /// <param name="maxNewTokens"></param>
        /// <param name="minLength"></param>
        /// <param name="minNewTokens"></param>
        /// <param name="doSample"></param>
        /// <param name="numBeams"></param>
        /// <param name="noRepeatNgramSize"></param>
        /// <param name="contextWindowSize"></param>
        /// <param name="slidingWindowSize"></param>
        /// <param name="attentionSinkSize"></param>
        /// <param name="frequencyPenalty"></param>
        /// <param name="presencePenalty"></param>
        /// <param name="bosTokenId"></param>
        /// <param name="maxTokens"></param>
        /// <param name="randomSeed"></param>
        /// <returns>ApiResponse of TextGenerationResponse</returns>
        public ApiResponse< TextGenerationResponse > TextGenerationWithHttpInfo (string provider, string model, string input, int? topK, double? topP, double? temperature, double? repetitionPenalty, string dtype, int? maxLength, int? maxNewTokens, int? minLength, int? minNewTokens, bool? doSample, int? numBeams, int? noRepeatNgramSize, int? contextWindowSize, int? slidingWindowSize, int? attentionSinkSize, double? frequencyPenalty, double? presencePenalty, int? bosTokenId, int? maxTokens, int? randomSeed)
        {
            // verify the required parameter 'provider' is set
            if (provider == null)
                throw new ApiException(400, "Missing required parameter 'provider' when calling TextGenerationApi->TextGeneration");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling TextGenerationApi->TextGeneration");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling TextGenerationApi->TextGeneration");
            // verify the required parameter 'topK' is set
            if (topK == null)
                throw new ApiException(400, "Missing required parameter 'topK' when calling TextGenerationApi->TextGeneration");
            // verify the required parameter 'topP' is set
            if (topP == null)
                throw new ApiException(400, "Missing required parameter 'topP' when calling TextGenerationApi->TextGeneration");
            // verify the required parameter 'temperature' is set
            if (temperature == null)
                throw new ApiException(400, "Missing required parameter 'temperature' when calling TextGenerationApi->TextGeneration");
            // verify the required parameter 'repetitionPenalty' is set
            if (repetitionPenalty == null)
                throw new ApiException(400, "Missing required parameter 'repetitionPenalty' when calling TextGenerationApi->TextGeneration");
            // verify the required parameter 'dtype' is set
            if (dtype == null)
                throw new ApiException(400, "Missing required parameter 'dtype' when calling TextGenerationApi->TextGeneration");
            // verify the required parameter 'maxLength' is set
            if (maxLength == null)
                throw new ApiException(400, "Missing required parameter 'maxLength' when calling TextGenerationApi->TextGeneration");
            // verify the required parameter 'maxNewTokens' is set
            if (maxNewTokens == null)
                throw new ApiException(400, "Missing required parameter 'maxNewTokens' when calling TextGenerationApi->TextGeneration");
            // verify the required parameter 'minLength' is set
            if (minLength == null)
                throw new ApiException(400, "Missing required parameter 'minLength' when calling TextGenerationApi->TextGeneration");
            // verify the required parameter 'minNewTokens' is set
            if (minNewTokens == null)
                throw new ApiException(400, "Missing required parameter 'minNewTokens' when calling TextGenerationApi->TextGeneration");
            // verify the required parameter 'doSample' is set
            if (doSample == null)
                throw new ApiException(400, "Missing required parameter 'doSample' when calling TextGenerationApi->TextGeneration");
            // verify the required parameter 'numBeams' is set
            if (numBeams == null)
                throw new ApiException(400, "Missing required parameter 'numBeams' when calling TextGenerationApi->TextGeneration");
            // verify the required parameter 'noRepeatNgramSize' is set
            if (noRepeatNgramSize == null)
                throw new ApiException(400, "Missing required parameter 'noRepeatNgramSize' when calling TextGenerationApi->TextGeneration");
            // verify the required parameter 'contextWindowSize' is set
            if (contextWindowSize == null)
                throw new ApiException(400, "Missing required parameter 'contextWindowSize' when calling TextGenerationApi->TextGeneration");
            // verify the required parameter 'slidingWindowSize' is set
            if (slidingWindowSize == null)
                throw new ApiException(400, "Missing required parameter 'slidingWindowSize' when calling TextGenerationApi->TextGeneration");
            // verify the required parameter 'attentionSinkSize' is set
            if (attentionSinkSize == null)
                throw new ApiException(400, "Missing required parameter 'attentionSinkSize' when calling TextGenerationApi->TextGeneration");
            // verify the required parameter 'frequencyPenalty' is set
            if (frequencyPenalty == null)
                throw new ApiException(400, "Missing required parameter 'frequencyPenalty' when calling TextGenerationApi->TextGeneration");
            // verify the required parameter 'presencePenalty' is set
            if (presencePenalty == null)
                throw new ApiException(400, "Missing required parameter 'presencePenalty' when calling TextGenerationApi->TextGeneration");
            // verify the required parameter 'bosTokenId' is set
            if (bosTokenId == null)
                throw new ApiException(400, "Missing required parameter 'bosTokenId' when calling TextGenerationApi->TextGeneration");
            // verify the required parameter 'maxTokens' is set
            if (maxTokens == null)
                throw new ApiException(400, "Missing required parameter 'maxTokens' when calling TextGenerationApi->TextGeneration");
            // verify the required parameter 'randomSeed' is set
            if (randomSeed == null)
                throw new ApiException(400, "Missing required parameter 'randomSeed' when calling TextGenerationApi->TextGeneration");

            var localVarPath = "/api/v1/text-generation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (provider != null) localVarFormParams.Add("provider", this.Configuration.ApiClient.ParameterToString(provider)); // form parameter
            if (model != null) localVarFormParams.Add("model", this.Configuration.ApiClient.ParameterToString(model)); // form parameter
            if (input != null) localVarFormParams.Add("input", this.Configuration.ApiClient.ParameterToString(input)); // form parameter
            if (topK != null) localVarFormParams.Add("top_k", this.Configuration.ApiClient.ParameterToString(topK)); // form parameter
            if (topP != null) localVarFormParams.Add("top_p", this.Configuration.ApiClient.ParameterToString(topP)); // form parameter
            if (temperature != null) localVarFormParams.Add("temperature", this.Configuration.ApiClient.ParameterToString(temperature)); // form parameter
            if (repetitionPenalty != null) localVarFormParams.Add("repetition_penalty", this.Configuration.ApiClient.ParameterToString(repetitionPenalty)); // form parameter
            if (dtype != null) localVarFormParams.Add("dtype", this.Configuration.ApiClient.ParameterToString(dtype)); // form parameter
            if (maxLength != null) localVarFormParams.Add("max_length", this.Configuration.ApiClient.ParameterToString(maxLength)); // form parameter
            if (maxNewTokens != null) localVarFormParams.Add("max_new_tokens", this.Configuration.ApiClient.ParameterToString(maxNewTokens)); // form parameter
            if (minLength != null) localVarFormParams.Add("min_length", this.Configuration.ApiClient.ParameterToString(minLength)); // form parameter
            if (minNewTokens != null) localVarFormParams.Add("min_new_tokens", this.Configuration.ApiClient.ParameterToString(minNewTokens)); // form parameter
            if (doSample != null) localVarFormParams.Add("do_sample", this.Configuration.ApiClient.ParameterToString(doSample)); // form parameter
            if (numBeams != null) localVarFormParams.Add("num_beams", this.Configuration.ApiClient.ParameterToString(numBeams)); // form parameter
            if (noRepeatNgramSize != null) localVarFormParams.Add("no_repeat_ngram_size", this.Configuration.ApiClient.ParameterToString(noRepeatNgramSize)); // form parameter
            if (contextWindowSize != null) localVarFormParams.Add("context_window_size", this.Configuration.ApiClient.ParameterToString(contextWindowSize)); // form parameter
            if (slidingWindowSize != null) localVarFormParams.Add("sliding_window_size", this.Configuration.ApiClient.ParameterToString(slidingWindowSize)); // form parameter
            if (attentionSinkSize != null) localVarFormParams.Add("attention_sink_size", this.Configuration.ApiClient.ParameterToString(attentionSinkSize)); // form parameter
            if (frequencyPenalty != null) localVarFormParams.Add("frequency_penalty", this.Configuration.ApiClient.ParameterToString(frequencyPenalty)); // form parameter
            if (presencePenalty != null) localVarFormParams.Add("presence_penalty", this.Configuration.ApiClient.ParameterToString(presencePenalty)); // form parameter
            if (bosTokenId != null) localVarFormParams.Add("bos_token_id", this.Configuration.ApiClient.ParameterToString(bosTokenId)); // form parameter
            if (maxTokens != null) localVarFormParams.Add("max_tokens", this.Configuration.ApiClient.ParameterToString(maxTokens)); // form parameter
            if (randomSeed != null) localVarFormParams.Add("random_seed", this.Configuration.ApiClient.ParameterToString(randomSeed)); // form parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TextGeneration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextGenerationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TextGenerationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TextGenerationResponse)));
        }

        /// <summary>
        /// Text Generation - Multi-Provider Generate text using multiple AI providers (Transformers.js, WebLLM, MediaPipe). Use the &#x27;provider&#x27; field to specify which AI provider to use for text generation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider"></param>
        /// <param name="model"></param>
        /// <param name="input"></param>
        /// <param name="topK"></param>
        /// <param name="topP"></param>
        /// <param name="temperature"></param>
        /// <param name="repetitionPenalty"></param>
        /// <param name="dtype"></param>
        /// <param name="maxLength"></param>
        /// <param name="maxNewTokens"></param>
        /// <param name="minLength"></param>
        /// <param name="minNewTokens"></param>
        /// <param name="doSample"></param>
        /// <param name="numBeams"></param>
        /// <param name="noRepeatNgramSize"></param>
        /// <param name="contextWindowSize"></param>
        /// <param name="slidingWindowSize"></param>
        /// <param name="attentionSinkSize"></param>
        /// <param name="frequencyPenalty"></param>
        /// <param name="presencePenalty"></param>
        /// <param name="bosTokenId"></param>
        /// <param name="maxTokens"></param>
        /// <param name="randomSeed"></param>
        /// <returns>Task of TextGenerationResponse</returns>
        public async System.Threading.Tasks.Task<TextGenerationResponse> TextGenerationAsync (string provider, string model, string input, int? topK, double? topP, double? temperature, double? repetitionPenalty, string dtype, int? maxLength, int? maxNewTokens, int? minLength, int? minNewTokens, bool? doSample, int? numBeams, int? noRepeatNgramSize, int? contextWindowSize, int? slidingWindowSize, int? attentionSinkSize, double? frequencyPenalty, double? presencePenalty, int? bosTokenId, int? maxTokens, int? randomSeed)
        {
             ApiResponse<TextGenerationResponse> localVarResponse = await TextGenerationAsyncWithHttpInfo(provider, model, input, topK, topP, temperature, repetitionPenalty, dtype, maxLength, maxNewTokens, minLength, minNewTokens, doSample, numBeams, noRepeatNgramSize, contextWindowSize, slidingWindowSize, attentionSinkSize, frequencyPenalty, presencePenalty, bosTokenId, maxTokens, randomSeed);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Text Generation - Multi-Provider Generate text using multiple AI providers (Transformers.js, WebLLM, MediaPipe). Use the &#x27;provider&#x27; field to specify which AI provider to use for text generation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider"></param>
        /// <param name="model"></param>
        /// <param name="input"></param>
        /// <param name="topK"></param>
        /// <param name="topP"></param>
        /// <param name="temperature"></param>
        /// <param name="repetitionPenalty"></param>
        /// <param name="dtype"></param>
        /// <param name="maxLength"></param>
        /// <param name="maxNewTokens"></param>
        /// <param name="minLength"></param>
        /// <param name="minNewTokens"></param>
        /// <param name="doSample"></param>
        /// <param name="numBeams"></param>
        /// <param name="noRepeatNgramSize"></param>
        /// <param name="contextWindowSize"></param>
        /// <param name="slidingWindowSize"></param>
        /// <param name="attentionSinkSize"></param>
        /// <param name="frequencyPenalty"></param>
        /// <param name="presencePenalty"></param>
        /// <param name="bosTokenId"></param>
        /// <param name="maxTokens"></param>
        /// <param name="randomSeed"></param>
        /// <returns>Task of ApiResponse (TextGenerationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TextGenerationResponse>> TextGenerationAsyncWithHttpInfo (string provider, string model, string input, int? topK, double? topP, double? temperature, double? repetitionPenalty, string dtype, int? maxLength, int? maxNewTokens, int? minLength, int? minNewTokens, bool? doSample, int? numBeams, int? noRepeatNgramSize, int? contextWindowSize, int? slidingWindowSize, int? attentionSinkSize, double? frequencyPenalty, double? presencePenalty, int? bosTokenId, int? maxTokens, int? randomSeed)
        {
            // verify the required parameter 'provider' is set
            if (provider == null)
                throw new ApiException(400, "Missing required parameter 'provider' when calling TextGenerationApi->TextGeneration");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling TextGenerationApi->TextGeneration");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling TextGenerationApi->TextGeneration");
            // verify the required parameter 'topK' is set
            if (topK == null)
                throw new ApiException(400, "Missing required parameter 'topK' when calling TextGenerationApi->TextGeneration");
            // verify the required parameter 'topP' is set
            if (topP == null)
                throw new ApiException(400, "Missing required parameter 'topP' when calling TextGenerationApi->TextGeneration");
            // verify the required parameter 'temperature' is set
            if (temperature == null)
                throw new ApiException(400, "Missing required parameter 'temperature' when calling TextGenerationApi->TextGeneration");
            // verify the required parameter 'repetitionPenalty' is set
            if (repetitionPenalty == null)
                throw new ApiException(400, "Missing required parameter 'repetitionPenalty' when calling TextGenerationApi->TextGeneration");
            // verify the required parameter 'dtype' is set
            if (dtype == null)
                throw new ApiException(400, "Missing required parameter 'dtype' when calling TextGenerationApi->TextGeneration");
            // verify the required parameter 'maxLength' is set
            if (maxLength == null)
                throw new ApiException(400, "Missing required parameter 'maxLength' when calling TextGenerationApi->TextGeneration");
            // verify the required parameter 'maxNewTokens' is set
            if (maxNewTokens == null)
                throw new ApiException(400, "Missing required parameter 'maxNewTokens' when calling TextGenerationApi->TextGeneration");
            // verify the required parameter 'minLength' is set
            if (minLength == null)
                throw new ApiException(400, "Missing required parameter 'minLength' when calling TextGenerationApi->TextGeneration");
            // verify the required parameter 'minNewTokens' is set
            if (minNewTokens == null)
                throw new ApiException(400, "Missing required parameter 'minNewTokens' when calling TextGenerationApi->TextGeneration");
            // verify the required parameter 'doSample' is set
            if (doSample == null)
                throw new ApiException(400, "Missing required parameter 'doSample' when calling TextGenerationApi->TextGeneration");
            // verify the required parameter 'numBeams' is set
            if (numBeams == null)
                throw new ApiException(400, "Missing required parameter 'numBeams' when calling TextGenerationApi->TextGeneration");
            // verify the required parameter 'noRepeatNgramSize' is set
            if (noRepeatNgramSize == null)
                throw new ApiException(400, "Missing required parameter 'noRepeatNgramSize' when calling TextGenerationApi->TextGeneration");
            // verify the required parameter 'contextWindowSize' is set
            if (contextWindowSize == null)
                throw new ApiException(400, "Missing required parameter 'contextWindowSize' when calling TextGenerationApi->TextGeneration");
            // verify the required parameter 'slidingWindowSize' is set
            if (slidingWindowSize == null)
                throw new ApiException(400, "Missing required parameter 'slidingWindowSize' when calling TextGenerationApi->TextGeneration");
            // verify the required parameter 'attentionSinkSize' is set
            if (attentionSinkSize == null)
                throw new ApiException(400, "Missing required parameter 'attentionSinkSize' when calling TextGenerationApi->TextGeneration");
            // verify the required parameter 'frequencyPenalty' is set
            if (frequencyPenalty == null)
                throw new ApiException(400, "Missing required parameter 'frequencyPenalty' when calling TextGenerationApi->TextGeneration");
            // verify the required parameter 'presencePenalty' is set
            if (presencePenalty == null)
                throw new ApiException(400, "Missing required parameter 'presencePenalty' when calling TextGenerationApi->TextGeneration");
            // verify the required parameter 'bosTokenId' is set
            if (bosTokenId == null)
                throw new ApiException(400, "Missing required parameter 'bosTokenId' when calling TextGenerationApi->TextGeneration");
            // verify the required parameter 'maxTokens' is set
            if (maxTokens == null)
                throw new ApiException(400, "Missing required parameter 'maxTokens' when calling TextGenerationApi->TextGeneration");
            // verify the required parameter 'randomSeed' is set
            if (randomSeed == null)
                throw new ApiException(400, "Missing required parameter 'randomSeed' when calling TextGenerationApi->TextGeneration");

            var localVarPath = "/api/v1/text-generation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (provider != null) localVarFormParams.Add("provider", this.Configuration.ApiClient.ParameterToString(provider)); // form parameter
            if (model != null) localVarFormParams.Add("model", this.Configuration.ApiClient.ParameterToString(model)); // form parameter
            if (input != null) localVarFormParams.Add("input", this.Configuration.ApiClient.ParameterToString(input)); // form parameter
            if (topK != null) localVarFormParams.Add("top_k", this.Configuration.ApiClient.ParameterToString(topK)); // form parameter
            if (topP != null) localVarFormParams.Add("top_p", this.Configuration.ApiClient.ParameterToString(topP)); // form parameter
            if (temperature != null) localVarFormParams.Add("temperature", this.Configuration.ApiClient.ParameterToString(temperature)); // form parameter
            if (repetitionPenalty != null) localVarFormParams.Add("repetition_penalty", this.Configuration.ApiClient.ParameterToString(repetitionPenalty)); // form parameter
            if (dtype != null) localVarFormParams.Add("dtype", this.Configuration.ApiClient.ParameterToString(dtype)); // form parameter
            if (maxLength != null) localVarFormParams.Add("max_length", this.Configuration.ApiClient.ParameterToString(maxLength)); // form parameter
            if (maxNewTokens != null) localVarFormParams.Add("max_new_tokens", this.Configuration.ApiClient.ParameterToString(maxNewTokens)); // form parameter
            if (minLength != null) localVarFormParams.Add("min_length", this.Configuration.ApiClient.ParameterToString(minLength)); // form parameter
            if (minNewTokens != null) localVarFormParams.Add("min_new_tokens", this.Configuration.ApiClient.ParameterToString(minNewTokens)); // form parameter
            if (doSample != null) localVarFormParams.Add("do_sample", this.Configuration.ApiClient.ParameterToString(doSample)); // form parameter
            if (numBeams != null) localVarFormParams.Add("num_beams", this.Configuration.ApiClient.ParameterToString(numBeams)); // form parameter
            if (noRepeatNgramSize != null) localVarFormParams.Add("no_repeat_ngram_size", this.Configuration.ApiClient.ParameterToString(noRepeatNgramSize)); // form parameter
            if (contextWindowSize != null) localVarFormParams.Add("context_window_size", this.Configuration.ApiClient.ParameterToString(contextWindowSize)); // form parameter
            if (slidingWindowSize != null) localVarFormParams.Add("sliding_window_size", this.Configuration.ApiClient.ParameterToString(slidingWindowSize)); // form parameter
            if (attentionSinkSize != null) localVarFormParams.Add("attention_sink_size", this.Configuration.ApiClient.ParameterToString(attentionSinkSize)); // form parameter
            if (frequencyPenalty != null) localVarFormParams.Add("frequency_penalty", this.Configuration.ApiClient.ParameterToString(frequencyPenalty)); // form parameter
            if (presencePenalty != null) localVarFormParams.Add("presence_penalty", this.Configuration.ApiClient.ParameterToString(presencePenalty)); // form parameter
            if (bosTokenId != null) localVarFormParams.Add("bos_token_id", this.Configuration.ApiClient.ParameterToString(bosTokenId)); // form parameter
            if (maxTokens != null) localVarFormParams.Add("max_tokens", this.Configuration.ApiClient.ParameterToString(maxTokens)); // form parameter
            if (randomSeed != null) localVarFormParams.Add("random_seed", this.Configuration.ApiClient.ParameterToString(randomSeed)); // form parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TextGeneration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextGenerationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TextGenerationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TextGenerationResponse)));
        }

    }
}
