/* 
 * Woolball AI Network API
 *
 * **Transform idle browsers into a powerful distributed AI inference network**  For detailed examples and model lists, visit our [GitHub repository](https://github.com/woolball-xyz/woolball-server).
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ISpeechRecognitionApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Speech Recognition (Speech-to-Text)
        /// </summary>
        /// <remarks>
        /// Convert audio files to text using Whisper models. Supports MP3, WAV, M4A and other audio formats.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="dtype"></param>
        /// <param name="input"></param>
        /// <param name="returnTimestamps"></param>
        /// <param name="stream"></param>
        /// <param name="chunkLengthS"></param>
        /// <param name="strideLengthS"></param>
        /// <param name="forceFullSequences"></param>
        /// <param name="language"></param>
        /// <param name="task"></param>
        /// <param name="numFrames"></param>
        /// <returns>List&lt;STTChunk&gt;</returns>
        List<STTChunk> SpeechToText (string model, string dtype, Object input, string returnTimestamps, bool? stream, int? chunkLengthS, int? strideLengthS, bool? forceFullSequences, string language, string task, int? numFrames);

        /// <summary>
        /// Speech Recognition (Speech-to-Text)
        /// </summary>
        /// <remarks>
        /// Convert audio files to text using Whisper models. Supports MP3, WAV, M4A and other audio formats.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="dtype"></param>
        /// <param name="input"></param>
        /// <param name="returnTimestamps"></param>
        /// <param name="stream"></param>
        /// <param name="chunkLengthS"></param>
        /// <param name="strideLengthS"></param>
        /// <param name="forceFullSequences"></param>
        /// <param name="language"></param>
        /// <param name="task"></param>
        /// <param name="numFrames"></param>
        /// <returns>ApiResponse of List&lt;STTChunk&gt;</returns>
        ApiResponse<List<STTChunk>> SpeechToTextWithHttpInfo (string model, string dtype, Object input, string returnTimestamps, bool? stream, int? chunkLengthS, int? strideLengthS, bool? forceFullSequences, string language, string task, int? numFrames);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Speech Recognition (Speech-to-Text)
        /// </summary>
        /// <remarks>
        /// Convert audio files to text using Whisper models. Supports MP3, WAV, M4A and other audio formats.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="dtype"></param>
        /// <param name="input"></param>
        /// <param name="returnTimestamps"></param>
        /// <param name="stream"></param>
        /// <param name="chunkLengthS"></param>
        /// <param name="strideLengthS"></param>
        /// <param name="forceFullSequences"></param>
        /// <param name="language"></param>
        /// <param name="task"></param>
        /// <param name="numFrames"></param>
        /// <returns>Task of List&lt;STTChunk&gt;</returns>
        System.Threading.Tasks.Task<List<STTChunk>> SpeechToTextAsync (string model, string dtype, Object input, string returnTimestamps, bool? stream, int? chunkLengthS, int? strideLengthS, bool? forceFullSequences, string language, string task, int? numFrames);

        /// <summary>
        /// Speech Recognition (Speech-to-Text)
        /// </summary>
        /// <remarks>
        /// Convert audio files to text using Whisper models. Supports MP3, WAV, M4A and other audio formats.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="dtype"></param>
        /// <param name="input"></param>
        /// <param name="returnTimestamps"></param>
        /// <param name="stream"></param>
        /// <param name="chunkLengthS"></param>
        /// <param name="strideLengthS"></param>
        /// <param name="forceFullSequences"></param>
        /// <param name="language"></param>
        /// <param name="task"></param>
        /// <param name="numFrames"></param>
        /// <returns>Task of ApiResponse (List&lt;STTChunk&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<STTChunk>>> SpeechToTextAsyncWithHttpInfo (string model, string dtype, Object input, string returnTimestamps, bool? stream, int? chunkLengthS, int? strideLengthS, bool? forceFullSequences, string language, string task, int? numFrames);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class SpeechRecognitionApi : ISpeechRecognitionApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SpeechRecognitionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SpeechRecognitionApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SpeechRecognitionApi"/> class
        /// </summary>
        /// <returns></returns>
        public SpeechRecognitionApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SpeechRecognitionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SpeechRecognitionApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.Options.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Speech Recognition (Speech-to-Text) Convert audio files to text using Whisper models. Supports MP3, WAV, M4A and other audio formats.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="dtype"></param>
        /// <param name="input"></param>
        /// <param name="returnTimestamps"></param>
        /// <param name="stream"></param>
        /// <param name="chunkLengthS"></param>
        /// <param name="strideLengthS"></param>
        /// <param name="forceFullSequences"></param>
        /// <param name="language"></param>
        /// <param name="task"></param>
        /// <param name="numFrames"></param>
        /// <returns>List&lt;STTChunk&gt;</returns>
        public List<STTChunk> SpeechToText (string model, string dtype, Object input, string returnTimestamps, bool? stream, int? chunkLengthS, int? strideLengthS, bool? forceFullSequences, string language, string task, int? numFrames)
        {
             ApiResponse<List<STTChunk>> localVarResponse = SpeechToTextWithHttpInfo(model, dtype, input, returnTimestamps, stream, chunkLengthS, strideLengthS, forceFullSequences, language, task, numFrames);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Speech Recognition (Speech-to-Text) Convert audio files to text using Whisper models. Supports MP3, WAV, M4A and other audio formats.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="dtype"></param>
        /// <param name="input"></param>
        /// <param name="returnTimestamps"></param>
        /// <param name="stream"></param>
        /// <param name="chunkLengthS"></param>
        /// <param name="strideLengthS"></param>
        /// <param name="forceFullSequences"></param>
        /// <param name="language"></param>
        /// <param name="task"></param>
        /// <param name="numFrames"></param>
        /// <returns>ApiResponse of List&lt;STTChunk&gt;</returns>
        public ApiResponse< List<STTChunk> > SpeechToTextWithHttpInfo (string model, string dtype, Object input, string returnTimestamps, bool? stream, int? chunkLengthS, int? strideLengthS, bool? forceFullSequences, string language, string task, int? numFrames)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling SpeechRecognitionApi->SpeechToText");
            // verify the required parameter 'dtype' is set
            if (dtype == null)
                throw new ApiException(400, "Missing required parameter 'dtype' when calling SpeechRecognitionApi->SpeechToText");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SpeechRecognitionApi->SpeechToText");
            // verify the required parameter 'returnTimestamps' is set
            if (returnTimestamps == null)
                throw new ApiException(400, "Missing required parameter 'returnTimestamps' when calling SpeechRecognitionApi->SpeechToText");
            // verify the required parameter 'stream' is set
            if (stream == null)
                throw new ApiException(400, "Missing required parameter 'stream' when calling SpeechRecognitionApi->SpeechToText");
            // verify the required parameter 'chunkLengthS' is set
            if (chunkLengthS == null)
                throw new ApiException(400, "Missing required parameter 'chunkLengthS' when calling SpeechRecognitionApi->SpeechToText");
            // verify the required parameter 'strideLengthS' is set
            if (strideLengthS == null)
                throw new ApiException(400, "Missing required parameter 'strideLengthS' when calling SpeechRecognitionApi->SpeechToText");
            // verify the required parameter 'forceFullSequences' is set
            if (forceFullSequences == null)
                throw new ApiException(400, "Missing required parameter 'forceFullSequences' when calling SpeechRecognitionApi->SpeechToText");
            // verify the required parameter 'language' is set
            if (language == null)
                throw new ApiException(400, "Missing required parameter 'language' when calling SpeechRecognitionApi->SpeechToText");
            // verify the required parameter 'task' is set
            if (task == null)
                throw new ApiException(400, "Missing required parameter 'task' when calling SpeechRecognitionApi->SpeechToText");
            // verify the required parameter 'numFrames' is set
            if (numFrames == null)
                throw new ApiException(400, "Missing required parameter 'numFrames' when calling SpeechRecognitionApi->SpeechToText");

            var localVarPath = "/api/v1/speech-recognition";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null) localVarFormParams.Add("model", this.Configuration.ApiClient.ParameterToString(model)); // form parameter
            if (dtype != null) localVarFormParams.Add("dtype", this.Configuration.ApiClient.ParameterToString(dtype)); // form parameter
            if (input != null) localVarFormParams.Add("input", this.Configuration.ApiClient.ParameterToString(input)); // form parameter
            if (returnTimestamps != null) localVarFormParams.Add("return_timestamps", this.Configuration.ApiClient.ParameterToString(returnTimestamps)); // form parameter
            if (stream != null) localVarFormParams.Add("stream", this.Configuration.ApiClient.ParameterToString(stream)); // form parameter
            if (chunkLengthS != null) localVarFormParams.Add("chunk_length_s", this.Configuration.ApiClient.ParameterToString(chunkLengthS)); // form parameter
            if (strideLengthS != null) localVarFormParams.Add("stride_length_s", this.Configuration.ApiClient.ParameterToString(strideLengthS)); // form parameter
            if (forceFullSequences != null) localVarFormParams.Add("force_full_sequences", this.Configuration.ApiClient.ParameterToString(forceFullSequences)); // form parameter
            if (language != null) localVarFormParams.Add("language", this.Configuration.ApiClient.ParameterToString(language)); // form parameter
            if (task != null) localVarFormParams.Add("task", this.Configuration.ApiClient.ParameterToString(task)); // form parameter
            if (numFrames != null) localVarFormParams.Add("num_frames", this.Configuration.ApiClient.ParameterToString(numFrames)); // form parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SpeechToText", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<STTChunk>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<STTChunk>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<STTChunk>)));
        }

        /// <summary>
        /// Speech Recognition (Speech-to-Text) Convert audio files to text using Whisper models. Supports MP3, WAV, M4A and other audio formats.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="dtype"></param>
        /// <param name="input"></param>
        /// <param name="returnTimestamps"></param>
        /// <param name="stream"></param>
        /// <param name="chunkLengthS"></param>
        /// <param name="strideLengthS"></param>
        /// <param name="forceFullSequences"></param>
        /// <param name="language"></param>
        /// <param name="task"></param>
        /// <param name="numFrames"></param>
        /// <returns>Task of List&lt;STTChunk&gt;</returns>
        public async System.Threading.Tasks.Task<List<STTChunk>> SpeechToTextAsync (string model, string dtype, Object input, string returnTimestamps, bool? stream, int? chunkLengthS, int? strideLengthS, bool? forceFullSequences, string language, string task, int? numFrames)
        {
             ApiResponse<List<STTChunk>> localVarResponse = await SpeechToTextAsyncWithHttpInfo(model, dtype, input, returnTimestamps, stream, chunkLengthS, strideLengthS, forceFullSequences, language, task, numFrames);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Speech Recognition (Speech-to-Text) Convert audio files to text using Whisper models. Supports MP3, WAV, M4A and other audio formats.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="dtype"></param>
        /// <param name="input"></param>
        /// <param name="returnTimestamps"></param>
        /// <param name="stream"></param>
        /// <param name="chunkLengthS"></param>
        /// <param name="strideLengthS"></param>
        /// <param name="forceFullSequences"></param>
        /// <param name="language"></param>
        /// <param name="task"></param>
        /// <param name="numFrames"></param>
        /// <returns>Task of ApiResponse (List&lt;STTChunk&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<STTChunk>>> SpeechToTextAsyncWithHttpInfo (string model, string dtype, Object input, string returnTimestamps, bool? stream, int? chunkLengthS, int? strideLengthS, bool? forceFullSequences, string language, string task, int? numFrames)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling SpeechRecognitionApi->SpeechToText");
            // verify the required parameter 'dtype' is set
            if (dtype == null)
                throw new ApiException(400, "Missing required parameter 'dtype' when calling SpeechRecognitionApi->SpeechToText");
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling SpeechRecognitionApi->SpeechToText");
            // verify the required parameter 'returnTimestamps' is set
            if (returnTimestamps == null)
                throw new ApiException(400, "Missing required parameter 'returnTimestamps' when calling SpeechRecognitionApi->SpeechToText");
            // verify the required parameter 'stream' is set
            if (stream == null)
                throw new ApiException(400, "Missing required parameter 'stream' when calling SpeechRecognitionApi->SpeechToText");
            // verify the required parameter 'chunkLengthS' is set
            if (chunkLengthS == null)
                throw new ApiException(400, "Missing required parameter 'chunkLengthS' when calling SpeechRecognitionApi->SpeechToText");
            // verify the required parameter 'strideLengthS' is set
            if (strideLengthS == null)
                throw new ApiException(400, "Missing required parameter 'strideLengthS' when calling SpeechRecognitionApi->SpeechToText");
            // verify the required parameter 'forceFullSequences' is set
            if (forceFullSequences == null)
                throw new ApiException(400, "Missing required parameter 'forceFullSequences' when calling SpeechRecognitionApi->SpeechToText");
            // verify the required parameter 'language' is set
            if (language == null)
                throw new ApiException(400, "Missing required parameter 'language' when calling SpeechRecognitionApi->SpeechToText");
            // verify the required parameter 'task' is set
            if (task == null)
                throw new ApiException(400, "Missing required parameter 'task' when calling SpeechRecognitionApi->SpeechToText");
            // verify the required parameter 'numFrames' is set
            if (numFrames == null)
                throw new ApiException(400, "Missing required parameter 'numFrames' when calling SpeechRecognitionApi->SpeechToText");

            var localVarPath = "/api/v1/speech-recognition";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null) localVarFormParams.Add("model", this.Configuration.ApiClient.ParameterToString(model)); // form parameter
            if (dtype != null) localVarFormParams.Add("dtype", this.Configuration.ApiClient.ParameterToString(dtype)); // form parameter
            if (input != null) localVarFormParams.Add("input", this.Configuration.ApiClient.ParameterToString(input)); // form parameter
            if (returnTimestamps != null) localVarFormParams.Add("return_timestamps", this.Configuration.ApiClient.ParameterToString(returnTimestamps)); // form parameter
            if (stream != null) localVarFormParams.Add("stream", this.Configuration.ApiClient.ParameterToString(stream)); // form parameter
            if (chunkLengthS != null) localVarFormParams.Add("chunk_length_s", this.Configuration.ApiClient.ParameterToString(chunkLengthS)); // form parameter
            if (strideLengthS != null) localVarFormParams.Add("stride_length_s", this.Configuration.ApiClient.ParameterToString(strideLengthS)); // form parameter
            if (forceFullSequences != null) localVarFormParams.Add("force_full_sequences", this.Configuration.ApiClient.ParameterToString(forceFullSequences)); // form parameter
            if (language != null) localVarFormParams.Add("language", this.Configuration.ApiClient.ParameterToString(language)); // form parameter
            if (task != null) localVarFormParams.Add("task", this.Configuration.ApiClient.ParameterToString(task)); // form parameter
            if (numFrames != null) localVarFormParams.Add("num_frames", this.Configuration.ApiClient.ParameterToString(numFrames)); // form parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SpeechToText", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<STTChunk>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<STTChunk>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<STTChunk>)));
        }

    }
}
